// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`doesn't conflict with Prettier: message 1`] = `
"No rules that are unnecessary or conflict with Prettier were found.
"
`;

exports[`doesn't conflict with Prettier: success 1`] = `true`;

exports[`lints with the Node config: fixtures/all-00.js 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "fatal": true,
      "line": 1,
      "message": "Parsing error: 'import' and 'export' may appear only with 'sourceType: module'",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "import 'hi';

import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import e from './e';

export * as f from './f';

export class Example {
  static s = {
    a,
    b,
  };

  m = {};
  #n = null;
  x = 1_000;
  y = 100n;

  hi() {
    _fn() ?? this.byeAsync();
    this.m &&= {};
    Example.s?.a?.();

    try {
      _fn();
    } catch (e) {
      _fn();
    }

    try {
      _fn();
    } catch (_ignored) {
      _fn();
    }

    this.#privateMethod();
  }

  async byeAsync() {
    let f = 1;
    _fn(a, b, c, c1, d, e, f);


    await import('z');
    
    for await (const v of gen()) {
      _fn(v);
    }
  }

  #privateMethod() {}
}

function _fn() {}

function *gen() {}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 0,
}
`;

exports[`lints with the Node config: fixtures/all-01.ts 1`] = `
{
  "errorCount": 11,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 15,
      "endColumn": 20,
      "endLine": 8,
      "line": 8,
      "message": "Missing file extension for "./e"",
      "nodeType": "Literal",
      "ruleId": "import/extensions",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 18,
      "endLine": 19,
      "line": 19,
      "message": "Duplicate name 'm'.",
      "messageId": "unexpected",
      "nodeType": "PropertyDefinition",
      "ruleId": "@typescript-eslint/no-dupe-class-members",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 5,
      "endLine": 21,
      "line": 21,
      "message": "Expected 'this' to be used by class method 'hi'.",
      "messageId": "missingThis",
      "nodeType": "FunctionExpression",
      "ruleId": "class-methods-use-this",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 8,
      "endLine": 22,
      "line": 22,
      "message": "'_fn' was used before it was defined.",
      "messageId": "noUseBeforeDefine",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-use-before-define",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 10,
      "endLine": 25,
      "line": 25,
      "message": "'_fn' was used before it was defined.",
      "messageId": "noUseBeforeDefine",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-use-before-define",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 10,
      "endLine": 27,
      "line": 27,
      "message": "'_fn' was used before it was defined.",
      "messageId": "noUseBeforeDefine",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-use-before-define",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 17,
      "endLine": 31,
      "line": 31,
      "message": "Expected 'this' to be used by class async method 'byeAsync'.",
      "messageId": "missingThis",
      "nodeType": "FunctionExpression",
      "ruleId": "class-methods-use-this",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 8,
      "endLine": 32,
      "line": 32,
      "message": "'_fn' was used before it was defined.",
      "messageId": "noUseBeforeDefine",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-use-before-define",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 36,
      "endLine": 36,
      "line": 36,
      "message": "Unexpected dangling '_' in '_fn'.",
      "messageId": "unexpectedUnderscore",
      "nodeType": "FunctionDeclaration",
      "ruleId": "no-underscore-dangle",
      "severity": 2,
    },
    {
      "column": 10,
      "endColumn": 13,
      "endLine": 36,
      "line": 36,
      "message": "Function name \`_fn\` must match one of the following formats: camelCase, PascalCase",
      "messageId": "doesNotMatchFormat",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/naming-convention",
      "severity": 2,
    },
    {
      "column": 17,
      "endColumn": 21,
      "endLine": 36,
      "line": 36,
      "message": "'args' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 2,
    },
    {
      "column": 17,
      "endColumn": 21,
      "endLine": 36,
      "line": 36,
      "message": "'args' is defined but never used. Allowed unused args must match /^_/u.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "unused-imports/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 23,
      "endColumn": 26,
      "endLine": 36,
      "line": 36,
      "message": "Unexpected any. Specify a different type.",
      "messageId": "unexpectedAny",
      "nodeType": "TSAnyKeyword",
      "ruleId": "@typescript-eslint/no-explicit-any",
      "severity": 1,
      "suggestions": [
        {
          "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
          "fix": {
            "range": [
              424,
              427,
            ],
            "text": "unknown",
          },
          "messageId": "suggestUnknown",
        },
        {
          "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
          "fix": {
            "range": [
              424,
              427,
            ],
            "text": "never",
          },
          "messageId": "suggestNever",
        },
      ],
    },
  ],
  "output": "import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import 'hi';

import e from './e';

@d
export class Example {
  static s = {
    a,
    b,
  };

  m: object = {};

  m: object = {};

  hi(): void {
    _fn();

    try {
      _fn();
    } catch (_notIgnored) {
      _fn();
    }
  }

  async byeAsync(): Promise<void> {
    _fn(a, b, c, c1, d, e);
  }
}

function _fn(...args: any): void {}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 2,
}
`;

exports[`lints with the Node config: fixtures/all-02.js 1`] = `
{
  "errorCount": 3,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 7,
      "endColumn": 14,
      "endLine": 1,
      "line": 1,
      "message": "'unused1' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 2,
    },
    {
      "column": 10,
      "endColumn": 17,
      "endLine": 3,
      "line": 3,
      "message": "'unused2' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 2,
    },
    {
      "column": 9,
      "endColumn": 16,
      "endLine": 4,
      "line": 4,
      "message": "'unused3' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 2,
    },
  ],
  "source": "const unused1 = 0;

function unused2() {
  const unused3 = 'hi';
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 0,
}
`;

exports[`lints with the Node config: fixtures/all-03.ts 1`] = `
{
  "errorCount": 4,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 7,
      "endColumn": 16,
      "endLine": 1,
      "line": 1,
      "message": "'tsUnused1' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 16,
      "endLine": 1,
      "line": 1,
      "message": "'tsUnused1' is assigned a value but never used. Allowed unused vars must match /^_/u.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "unused-imports/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 10,
      "endColumn": 19,
      "endLine": 3,
      "line": 3,
      "message": "'tsUnused2' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 2,
    },
    {
      "column": 10,
      "endColumn": 19,
      "endLine": 3,
      "line": 3,
      "message": "'tsUnused2' is defined but never used. Allowed unused vars must match /^_/u.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "unused-imports/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 12,
      "endColumn": 15,
      "endLine": 4,
      "line": 4,
      "message": "Unexpected any. Specify a different type.",
      "messageId": "unexpectedAny",
      "nodeType": "TSAnyKeyword",
      "ruleId": "@typescript-eslint/no-explicit-any",
      "severity": 1,
      "suggestions": [
        {
          "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
          "fix": {
            "range": [
              56,
              59,
            ],
            "text": "unknown",
          },
          "messageId": "suggestUnknown",
        },
        {
          "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
          "fix": {
            "range": [
              56,
              59,
            ],
            "text": "never",
          },
          "messageId": "suggestNever",
        },
      ],
    },
    {
      "column": 9,
      "endColumn": 15,
      "endLine": 5,
      "line": 5,
      "message": "'asCast' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 2,
    },
    {
      "column": 9,
      "endColumn": 15,
      "endLine": 5,
      "line": 5,
      "message": "'asCast' is assigned a value but never used. Allowed unused vars must match /^_/u.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "unused-imports/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 9,
      "endColumn": 25,
      "endLine": 6,
      "line": 6,
      "message": "'angleBracketCast' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 2,
    },
    {
      "column": 9,
      "endColumn": 25,
      "endLine": 6,
      "line": 6,
      "message": "'angleBracketCast' is assigned a value but never used. Allowed unused vars must match /^_/u.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "unused-imports/no-unused-vars",
      "severity": 1,
    },
  ],
  "source": "const tsUnused1 = 0;

function tsUnused2() {
  const x: any = 'hi';
  const asCast = x as string;
  const angleBracketCast = <string>x;
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 5,
}
`;

exports[`lints with the Node config: fixtures/all-04.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [],
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 0,
}
`;

exports[`lints with the Node config: fixtures/all-05.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 21,
      "endColumn": 23,
      "endLine": 1,
      "line": 1,
      "message": "Forbidden non-null assertion.",
      "messageId": "noNonNull",
      "nodeType": "TSNonNullExpression",
      "ruleId": "@typescript-eslint/no-non-null-assertion",
      "severity": 1,
    },
  ],
  "output": "export const blah = 3!;
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 1,
}
`;

exports[`lints with the Node config: fixtures/all-06.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [],
  "output": "export const numberTest: number | null = null;
export const booleanTest: boolean | null = null;
export const symbolTest: symbol | null = null;
export const objectTest: object | null = null;
export const stringTest: string | null = null;
export const objectShorthandTest: object | null = null;
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 0,
}
`;

exports[`lints with the Node config: fixtures/all-07.js 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "fatal": true,
      "line": 2,
      "message": "Parsing error: 'import' and 'export' may appear only with 'sourceType: module'",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "const a = require('a');
import d from './d';
const e = require('e');
import c from 'c';
import b from 'b';

export default a + b + c + d + e;",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 0,
}
`;

exports[`lints with the Node config: fixtures/node-00.js 1`] = `
{
  "errorCount": 3,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 7,
      "endColumn": 11,
      "endLine": 1,
      "line": 1,
      "message": "'data' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 2,
    },
    {
      "column": 14,
      "endColumn": 28,
      "endLine": 1,
      "line": 1,
      "message": "new Buffer() is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead.",
      "messageId": "deprecated",
      "nodeType": "NewExpression",
      "ruleId": "no-buffer-constructor",
      "severity": 2,
    },
    {
      "column": 14,
      "endColumn": 28,
      "endLine": 1,
      "line": 1,
      "message": "'new Buffer()' was deprecated since v6.0.0. Use 'Buffer.alloc()' or 'Buffer.from()' instead.",
      "messageId": "deprecated",
      "nodeType": "NewExpression",
      "ruleId": "n/no-deprecated-api",
      "severity": 2,
    },
  ],
  "source": "const data = new Buffer(16);
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
  ],
  "warningCount": 0,
}
`;
