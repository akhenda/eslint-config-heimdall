// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`doesn't conflict with Prettier: message 1`] = `
"No rules that are unnecessary or conflict with Prettier were found.
"
`;

exports[`doesn't conflict with Prettier: success 1`] = `true`;

exports[`lints with the Hardcore config: fixtures/all-00.js 1`] = `
{
  "errorCount": 22,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 1,
      "line": 1,
      "message": "Definition for rule 'functional/no-expression-statement' was not found.",
      "nodeType": null,
      "ruleId": "functional/no-expression-statement",
      "severity": 2,
    },
    {
      "column": 8,
      "endColumn": 9,
      "endLine": 8,
      "line": 8,
      "message": "Please rename the variable \`e\`. Suggested names are: \`error\`, \`event\`. A more descriptive name will do too.",
      "messageId": "suggestion",
      "nodeType": "Identifier",
      "ruleId": "unicorn/prevent-abbreviations",
      "severity": 2,
    },
    {
      "column": 8,
      "endColumn": 2,
      "endLine": 56,
      "line": 12,
      "message": "Unexpected class, use functions not classes.",
      "messageId": "generic",
      "nodeType": "ClassDeclaration",
      "ruleId": "functional/no-classes",
      "severity": 2,
    },
    {
      "column": 8,
      "endColumn": 12,
      "endLine": 19,
      "line": 19,
      "message": "Use \`undefined\` instead of \`null\`.",
      "messageId": "error",
      "nodeType": "Literal",
      "ruleId": "unicorn/no-null",
      "severity": 2,
      "suggestions": [
        {
          "data": {},
          "desc": "Replace \`null\` with \`undefined\`.",
          "fix": {
            "range": [
              232,
              236,
            ],
            "text": "undefined",
          },
          "messageId": "replace",
        },
      ],
    },
    {
      "column": 5,
      "endColumn": 4,
      "endLine": 41,
      "line": 23,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 36,
      "endLine": 24,
      "line": 24,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 19,
      "endLine": 25,
      "line": 25,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 18,
      "endLine": 25,
      "line": 25,
      "message": "Modifying an existing object/array is not allowed.",
      "messageId": "generic",
      "nodeType": "AssignmentExpression",
      "ruleId": "functional/immutable-data",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 22,
      "endLine": 26,
      "line": 26,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 19,
      "endLine": 29,
      "line": 29,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 19,
      "endLine": 31,
      "line": 31,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 19,
      "endLine": 35,
      "line": 35,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 19,
      "endLine": 37,
      "line": 37,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 27,
      "endLine": 40,
      "line": 40,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 17,
      "endColumn": 4,
      "endLine": 53,
      "line": 43,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 37,
      "endLine": 45,
      "line": 45,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 23,
      "endLine": 48,
      "line": 48,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 6,
      "endLine": 52,
      "line": 50,
      "message": "Unexpected loop, use map or reduce instead.",
      "messageId": "generic",
      "nodeType": "ForOfStatement",
      "ruleId": "functional/no-loop-statements",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 20,
      "endLine": 51,
      "line": 51,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 17,
      "endColumn": 22,
      "endLine": 55,
      "line": 55,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 24,
      "endLine": 58,
      "line": 58,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionDeclaration",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 19,
      "endLine": 60,
      "line": 60,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionDeclaration",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
  ],
  "output": "import 'hi';

import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import e from './e';

export * as f from './f';

export class Example {
  static s = {
    a,
    b,
  };

  m = {};
  #n = null;
  x = 1000;
  y = 100n;

  hi() {
    _function() ?? this.byeAsync();
    this.m &&= {};
    Example.s?.a?.();

    try {
      _function();
    } catch {
      _function();
    }

    try {
      _function();
    } catch {
      _function();
    }

    this.#privateMethod();
  }

  async byeAsync() {
    const f = 1;
    _function(a, b, c, c1, d, e, f);


    await import('z');
    
    for await (const v of gen()) {
      _function(v);
    }
  }

  #privateMethod() {}
}

function _function() {}

function *gen() {}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/all-01.ts 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "fatal": true,
      "line": 10,
      "message": "Parsing error: Unexpected character '@'",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "import 'hi';

import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import e from './e';

@d
export class Example {
  static s = {
    a,
    b,
  };

  m: object = {};
  m: object = {};

  hi(): void {
    _fn();

    try {
      _fn();
    } catch (_notIgnored) {
      _fn();
    }
  }

  async byeAsync(): Promise<void> {
    _fn(a, b, c, c1, d, e);
  }
}

function _fn(...args: any): void {}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/all-02.js 1`] = `
{
  "errorCount": 2,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 1,
      "line": 1,
      "message": "Definition for rule 'functional/no-expression-statement' was not found.",
      "nodeType": null,
      "ruleId": "functional/no-expression-statement",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 5,
      "line": 3,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionDeclaration",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
  ],
  "source": "const unused1 = 0;

function unused2() {
  const unused3 = 'hi';
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/all-03.ts 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 10,
      "fatal": true,
      "line": 4,
      "message": "Parsing error: Unexpected token :",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "const tsUnused1 = 0;

function tsUnused2() {
  const x: any = 'hi';
  const asCast = x as string;
  const angleBracketCast = <string>x;
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/all-04.ts 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 22,
      "fatal": true,
      "line": 1,
      "message": "Parsing error: Unexpected token )",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "export const blah = (): Array<string> => {
  return ['1'];
};
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/all-05.ts 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 22,
      "fatal": true,
      "line": 1,
      "message": "Parsing error: Unexpected token !",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "export const blah = 3!!;",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/all-06.ts 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 24,
      "fatal": true,
      "line": 1,
      "message": "Parsing error: Unexpected token :",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "export const numberTest: Number | null = null;
export const booleanTest: Boolean | null = null;
export const symbolTest: Symbol | null = null;
export const objectTest: Object | null = null;
export const stringTest: String | null = null;
export const objectShorthandTest: {} | null = null;",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/all-07.js 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 1,
      "line": 1,
      "message": "Definition for rule 'functional/no-expression-statement' was not found.",
      "nodeType": null,
      "ruleId": "functional/no-expression-statement",
      "severity": 2,
    },
  ],
  "source": "const a = require('a');
import d from './d';
const e = require('e');
import c from 'c';
import b from 'b';

export default a + b + c + d + e;",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/node-00.js 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 1,
      "line": 1,
      "message": "Definition for rule 'functional/no-expression-statement' was not found.",
      "nodeType": null,
      "ruleId": "functional/no-expression-statement",
      "severity": 2,
    },
  ],
  "output": "const data = Buffer.alloc(16);
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/react-and-react-native-00.js 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 12,
      "fatal": true,
      "line": 33,
      "message": "Parsing error: Unexpected token <",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "import React from 'react';

export default class Example extends React.Component {
  state = {
    x: 'x',
    ...{
      y: 'y',
    },
  };

  props;

  static getInitialProps() {}

  constructor(props, context) {
    super(props, context);
    this.state = {
      ...this.state,
      x: props.x,
    };
  }

  componentDidMount() {
    fetch('http://example.com');
    new XMLHttpRequest().send();
    Uint16Array.from([1, 2, 3, 4, 5]);
    new SharedArrayBuffer(16).slice();
  }

  shouldComponentUpdate() {}

  render() {
    return <div>{this.state.x}</div>;
  }

  _handleWhatever() {}
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/react-and-react-native-01.js 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 12,
      "fatal": true,
      "line": 12,
      "message": "Parsing error: Unexpected token <",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "import React from 'react';

export default class Example extends React.Component {
  props = { x: 'x' };

  componentDidMount() {
    alert('uh oh');
    this.setState({});
  }

  render() {
    return <div>{this.props.x}</div>;
  }
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/react-and-react-native-02.js 1`] = `
{
  "errorCount": 8,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 1,
      "line": 1,
      "message": "Definition for rule 'functional/no-expression-statement' was not found.",
      "nodeType": null,
      "ruleId": "functional/no-expression-statement",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 13,
      "line": 1,
      "message": "Filename 'react-and-react-native-02' must match any of the exported and transformed names 'Example', 'example', 'example'.",
      "nodeType": "Program",
      "ruleId": "filenames/match-exported",
      "severity": 2,
    },
    {
      "column": 16,
      "endColumn": 2,
      "endLine": 13,
      "line": 3,
      "message": "Unexpected class, use functions not classes.",
      "messageId": "generic",
      "nodeType": "ClassDeclaration",
      "ruleId": "functional/no-classes",
      "severity": 2,
    },
    {
      "column": 21,
      "endColumn": 26,
      "endLine": 4,
      "line": 4,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 9,
      "endColumn": 4,
      "endLine": 8,
      "line": 6,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 12,
      "endColumn": 16,
      "endLine": 7,
      "line": 7,
      "message": "Use \`undefined\` instead of \`null\`.",
      "messageId": "error",
      "nodeType": "Literal",
      "ruleId": "unicorn/no-null",
      "severity": 2,
      "suggestions": [
        {
          "data": {},
          "desc": "Remove \`null\`.",
          "fix": {
            "range": [
              134,
              138,
            ],
            "text": "",
          },
          "messageId": "remove",
        },
        {
          "data": {},
          "desc": "Replace \`null\` with \`undefined\`.",
          "fix": {
            "range": [
              134,
              138,
            ],
            "text": "undefined",
          },
          "messageId": "replace",
        },
      ],
    },
    {
      "column": 20,
      "endColumn": 25,
      "endLine": 10,
      "line": 10,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 25,
      "endColumn": 30,
      "endLine": 12,
      "line": 12,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
  ],
  "source": "import React from 'react';

export default class Example extends React.Component {
  componentDidUpdate() {}

  render() {
    return null;
  }

  componentDidMount() {}

  static getInitialProps() {}
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/react-and-react-native-03.js 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 10,
      "fatal": true,
      "line": 5,
      "message": "Parsing error: Unexpected token <",
      "ruleId": null,
      "severity": 2,
    },
  ],
  "source": "import React from 'react';
import { View } from 'react-native';

export default function Example() {
  return <View testID={'test'} />;
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the Hardcore config: fixtures/react-and-react-native-04.js 1`] = `
{
  "errorCount": 12,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 1,
      "line": 1,
      "message": "Definition for rule 'functional/no-expression-statement' was not found.",
      "nodeType": null,
      "ruleId": "functional/no-expression-statement",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 16,
      "line": 1,
      "message": "Filename 'react-and-react-native-04' must match any of the exported and transformed names 'Example', 'example', 'example'.",
      "nodeType": "Program",
      "ruleId": "filenames/match-exported",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 10,
      "endLine": 7,
      "line": 5,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 13,
      "endColumn": 4,
      "endLine": 7,
      "line": 5,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "ArrowFunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 36,
      "endLine": 6,
      "line": 6,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 36,
      "endLine": 9,
      "line": 9,
      "message": "Use destructured variables over properties.",
      "messageId": "consistentDestructuring",
      "nodeType": "MemberExpression",
      "ruleId": "unicorn/consistent-destructuring",
      "severity": 2,
      "suggestions": [
        {
          "data": {
            "expression": "properties.badConditionalHook",
            "property": "badConditionalHook",
          },
          "desc": "Replace \`properties.badConditionalHook\` with destructured property \`badConditionalHook\`.",
          "fix": {
            "range": [
              109,
              228,
            ],
            "text": ", badConditionalHook } = properties;
  useEffect(() => {
    console.log(dependentVariable);
  }, []);

  if (badConditionalHook",
          },
          "messageId": "consistentDestructuringSuggest",
        },
      ],
    },
    {
      "column": 38,
      "endColumn": 4,
      "endLine": 11,
      "line": 9,
      "message": "Incomplete branch, every branch in a conditional statement must contain a return statement.",
      "messageId": "incompleteBranch",
      "nodeType": "BlockStatement",
      "ruleId": "functional/no-conditional-statements",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 25,
      "endLine": 10,
      "line": 10,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 15,
      "endColumn": 23,
      "endLine": 10,
      "line": 10,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "ArrowFunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 16,
      "line": 14,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "FunctionDeclaration",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 23,
      "endLine": 15,
      "line": 15,
      "message": "Using expressions to cause side-effects not allowed.",
      "messageId": "generic",
      "nodeType": "ExpressionStatement",
      "ruleId": "functional/no-expression-statements",
      "severity": 2,
    },
    {
      "column": 13,
      "endColumn": 21,
      "endLine": 15,
      "line": 15,
      "message": "Functions must have at least one parameter.",
      "messageId": "paramCountAtLeastOne",
      "nodeType": "ArrowFunctionExpression",
      "ruleId": "functional/functional-parameters",
      "severity": 2,
    },
  ],
  "output": "import { useEffect } from 'react';

export default function Example(properties) {
  const { dependentVariable } = properties;
  useEffect(() => {
    console.log(dependentVariable);
  }, []);

  if (properties.badConditionalHook) {
    useEffect(() => {});
  }
}

function notAHook() {
  useEffect(() => {});
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;
